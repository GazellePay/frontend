[{"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/pages/_app.tsx":"1","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/pages/index.tsx":"2","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/Balance.tsx":"3","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/CakeOrderSheet.tsx":"4","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/CakeSizeChoice.tsx":"5","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/ConnectWallet.tsx":"6","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/DonationItem.tsx":"7","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/Image.tsx":"8","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/layout/Head.tsx":"9","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/layout/Layout.tsx":"10","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/lib/utils.ts":"11"},{"size":975,"mtime":1644014443293,"results":"12","hashOfConfig":"13"},{"size":5531,"mtime":1644017297133,"results":"14","hashOfConfig":"13"},{"size":655,"mtime":1644014443290,"results":"15","hashOfConfig":"13"},{"size":4332,"mtime":1644017564795,"results":"16","hashOfConfig":"13"},{"size":976,"mtime":1644014443290,"results":"17","hashOfConfig":"13"},{"size":1441,"mtime":1644014443290,"results":"18","hashOfConfig":"13"},{"size":2974,"mtime":1644014443291,"results":"19","hashOfConfig":"13"},{"size":576,"mtime":1644014443291,"results":"20","hashOfConfig":"13"},{"size":1590,"mtime":1644017703485,"results":"21","hashOfConfig":"13"},{"size":4936,"mtime":1644019985560,"results":"22","hashOfConfig":"13"},{"size":1335,"mtime":1644014443292,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p6d1h4",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/pages/_app.tsx",[],"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/pages/index.tsx",["52","53"],"import { AspectRatio, Flex, Heading, useToast, VStack } from '@chakra-ui/react'\nimport { ethers } from 'ethers'\nimport React from 'react'\nimport { CheesecakePortalContract as LOCAL_CONTRACT_ADDRESS } from '../artifacts/contracts/contractAddress'\nimport CheesecakePortal from '../artifacts/contracts/CheesecakePortal.sol/CheesecakePortal.json'\nimport { Layout } from '../components/layout/Layout'\nimport { CheesecakePortal as CheesecakePortalContractType } from '../types/typechain'\nimport { ChainId, useEthers } from '@usedapp/core'\nimport { Donation } from '../types/donation'\nimport DonationItem from '../components/DonationItem'\nimport { filter } from '../lib/utils'\nimport CakeOrderSheet, { PRICES } from 'components/CakeOrderSheet'\nimport Image from 'components/Image'\nimport { CakeSize } from 'components/CakeSizeChoice'\n\n/**\n * Constants & Helpers\n */\n\nconst MUMBAI_CONTRACT_ADDRESS = '0x8E0a82c6025D50F7F6ed4f322c9ecE28fEDBd7c9'\nconst POLYGON_CONTRACT_ADDRESS = '0x2152319a294b273aDBB9c028FfEcBdEEF0882680'\n\nfunction HomeIndex(): JSX.Element {\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [donations, setDonations] = React.useState<Donation[]>([])\n\n  const { account, chainId, library } = useEthers()\n  const toast = useToast()\n\n  const CONTRACT_ADDRESS = React.useMemo(() => {\n    switch (chainId) {\n      case ChainId.Localhost || ChainId.Hardhat:\n        return LOCAL_CONTRACT_ADDRESS\n      case ChainId.Mumbai:\n        return MUMBAI_CONTRACT_ADDRESS\n      case ChainId.Polygon:\n        return POLYGON_CONTRACT_ADDRESS\n      default:\n        return LOCAL_CONTRACT_ADDRESS\n    }\n  }, [chainId, account])\n\n  const contract = React.useMemo(() => {\n    if (!library) {\n      return null\n    }\n    return new ethers.Contract(\n      CONTRACT_ADDRESS,\n      CheesecakePortal.abi,\n      library.getSigner()\n    ) as CheesecakePortalContractType\n  }, [chainId, library, CONTRACT_ADDRESS])\n\n  const fetchAllDonations = React.useCallback(async () => {\n    if (library) {\n      try {\n        const data = await contract.getAllCheesecakes()\n\n        // Sort data by timestamp\n        const sortedData = data\n          .slice()\n          .map((x) => ({\n            ...x,\n            name: filter.clean(x.name),\n            message: filter.clean(x.message),\n          }))\n          .sort((a, b) => {\n            return b.timestamp.toNumber() - a.timestamp.toNumber()\n          })\n        setDonations(sortedData)\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log(err)\n      }\n    }\n  }, [contract, setDonations, library])\n\n  async function sendCheesecake(\n    cakeSize: CakeSize,\n    name: string,\n    message: string\n  ) {\n    if (library) {\n      setIsLoading(true)\n\n      let ethersAmount: number\n      let cakeCountIndex: number\n      switch (cakeSize) {\n        case 'small':\n          ethersAmount = PRICES.small\n          cakeCountIndex = 0\n          break\n        case 'medium':\n          ethersAmount = PRICES.medium\n          cakeCountIndex = 1\n          break\n        case 'large':\n          ethersAmount = PRICES.large\n          cakeCountIndex = 2\n          break\n        default:\n          break\n      }\n\n      try {\n        const transaction = await contract.sendCheesecake(\n          message,\n          name,\n          cakeCountIndex,\n          {\n            value: ethers.utils.parseEther(ethersAmount.toString()),\n          }\n        )\n\n        // Add loading donation item\n        setDonations((old) => [\n          {\n            timestamp: ethers.BigNumber.from(\n              Math.floor(new Date().getTime() / 1000)\n            ),\n            giver: account,\n            isLoading: true,\n          },\n          ...old,\n        ])\n        await transaction.wait()\n      } catch (error) {\n        console.error(error)\n        if ((error?.data?.message as string).includes('insufficient funds')) {\n          toast({\n            title: 'Error encountered',\n            description: 'You have insufficient funds!',\n            status: 'error',\n            duration: 2000,\n            isClosable: true,\n          })\n        }\n      }\n\n      await fetchAllDonations()\n      setIsLoading(false)\n    }\n  }\n\n  React.useEffect(() => {\n    fetchAllDonations()\n  }, [library, fetchAllDonations])\n\n  return (\n    <Layout>\n      <VStack alignItems=\"center\" mb={8} height=\"full\">\n        <AspectRatio ratio={1} width=\"6rem\">\n          <Image\n            src=\"/images/cheesecake.svg\"\n            alt=\"Image of a cheesecake\"\n            layout=\"fill\"\n            objectFit=\"contain\"\n          />\n        </AspectRatio>\n        <Heading as=\"h1\" fontSize=\"3xl\">\n          Fund An Opensource Project The Web3 Way\n        </Heading>\n      </VStack>\n\n      {library ? (\n        <Flex\n          w=\"full\"\n          justifyContent=\"space-around\"\n          alignItems=\"center\"\n          maxWidth=\"container.lg\"\n          height=\"80vh\"\n        >\n          {/* Form */}\n          <CakeOrderSheet\n            sendCheesecake={sendCheesecake}\n            isLoading={isLoading}\n          />\n\n          <VStack\n            spacing={0}\n            pl={4}\n            height=\"full\"\n            overflowY=\"auto\"\n            alignItems=\"flex-start\"\n          >\n            {donations.map((donation, index) => (\n              <DonationItem key={index} item={donation} />\n            ))}\n            <DonationItem />\n          </VStack>\n        </Flex>\n      ) : (\n        <Heading my=\"auto\">Please connect to a wallet to continue</Heading>\n      )}\n    </Layout>\n  )\n}\n\nexport default HomeIndex\n","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/Balance.tsx",[],"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/CakeOrderSheet.tsx",["54"],"import React from 'react'\nimport { SubmitHandler, useController, useForm } from 'react-hook-form'\n\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n  FormHelperText,\n  HStack,\n  Textarea,\n  VStack,\n  useRadioGroup,\n  Flex,\n  Text,\n} from '@chakra-ui/react'\nimport CakeSizeChoice, { CakeSize, CAKE_SIZES } from './CakeSizeChoice'\n\ninterface Inputs {\n  name: string\n  message: string\n  cakeSize: CakeSize\n}\n\ninterface Props {\n  isLoading: boolean\n  sendCheesecake: (\n    size: CakeSize,\n    name: string,\n    message: string\n  ) => Promise<void>\n}\n\nexport const PRICES = {\n  small: 0.2,\n  medium: 0.5,\n  large: 1,\n}\n\nconst CakeOrderSheet = ({ sendCheesecake, isLoading }: Props) => {\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    reset,\n  } = useForm<Inputs>({\n    defaultValues: {\n      message: '',\n      name: '',\n      cakeSize: 'small',\n    },\n  })\n\n  const {\n    field: radioField,\n    formState: { errors: radioGroupErrors },\n  } = useController({\n    control,\n    name: 'cakeSize',\n    defaultValue: 'small',\n    rules: {\n      required: { value: true, message: 'Required' },\n    },\n  })\n\n  const [price, setPrice] = React.useState<number>(PRICES.small)\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'cakeSize',\n    defaultValue: 'small',\n    value: radioField.value,\n    onChange: (value) => {\n      radioField.onChange(value)\n      setPrice(PRICES[value])\n    },\n  })\n\n  const onSubmit: SubmitHandler<Inputs> = async (data) => {\n    await sendCheesecake(data.cakeSize, data.name, data.message)\n    reset({\n      message: '',\n      name: '',\n    })\n  }\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <VStack\n        spacing={8}\n        p={8}\n        borderColor=\"teal.500\"\n        borderWidth={3}\n        rounded=\"lg\"\n        boxShadow=\"lg\"\n        bg=\"gray.50\"\n      >\n        <FormControl isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\n          <Input\n            id=\"name\"\n            type=\"text\"\n            maxLength={20}\n            borderWidth={2}\n            placeholder=\"Your name\"\n            {...register('name', {\n              required: 'This is required',\n              minLength: { value: 4, message: 'Minimum length should be 4' },\n              maxLength: { value: 16, message: 'Maximum length should be 16' },\n            })}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n\n          <FormHelperText>Let the team know who you are!</FormHelperText>\n        </FormControl>\n        <FormControl isInvalid={Boolean(errors.message)}>\n          <FormLabel htmlFor=\"message`\">Message</FormLabel>\n          <Textarea\n            id=\"message\"\n            type=\"text\"\n            size=\"sm\"\n            borderWidth={2}\n            placeholder=\"Keep putting in the work!\"\n            {...register('message', {\n              required: 'This is required',\n              minLength: { value: 4, message: 'Minimum length should be 4' },\n              maxLength: { value: 120, message: 'Maximum length is 120' },\n            })}\n          />\n          <FormErrorMessage>\n            {errors.message && errors.message.message}\n          </FormErrorMessage>\n          <FormHelperText>Leave us a short message! (Max 120 char)</FormHelperText>\n        </FormControl>\n\n        <FormControl isInvalid={Boolean(radioGroupErrors['cakeSize'])}>\n          <FormLabel>Select An Option To Donate</FormLabel>\n\n          <HStack spacing={4} {...getRootProps()}>\n            {CAKE_SIZES.map((size) => {\n              const radio = getRadioProps({ value: size })\n              return <CakeSizeChoice key={size} choice={size} {...radio} />\n            })}\n          </HStack>\n          <FormHelperText>\n            Select the amount of Matic you wish to Donate!\n          </FormHelperText>\n        </FormControl>\n\n        {/* Insert order sheet here */}\n        <Flex flexDir=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Text as=\"b\" fontSize=\"xl\">\n            Price: {price} MATIC\n          </Text>\n        </Flex>\n\n        <Button mt={4} colorScheme=\"teal\" isLoading={isLoading} type=\"submit\">\n          Send Donation\n        </Button>\n      </VStack>\n    </form>\n  )\n}\n\nexport default CakeOrderSheet\n","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/CakeSizeChoice.tsx",["55"],"import { Box, useRadio, UseRadioProps } from '@chakra-ui/react'\nimport { capWord } from 'lib/utils'\nimport React from 'react'\n\nexport const CAKE_SIZES = ['small', 'medium', 'large'] as const\nexport type CakeSize = typeof CAKE_SIZES[number]\n\ninterface Props {\n  choice: CakeSize\n}\n\nconst CakeSizeChoice = (props: Props & UseRadioProps) => {\n  const { getInputProps, getCheckboxProps } = useRadio(props)\n\n  const input = getInputProps()\n  const checkbox = getCheckboxProps()\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      <Box\n        {...checkbox}\n        cursor=\"pointer\"\n        borderWidth=\"1px\"\n        borderRadius=\"md\"\n        boxShadow=\"md\"\n        _checked={{\n          bg: 'teal.600',\n          color: 'white',\n          borderColor: 'teal.600',\n        }}\n        _focus={{\n          boxShadow: 'outline',\n        }}\n        px={5}\n        py={3}\n      >\n        {capWord(props.choice)}\n      </Box>\n    </Box>\n  )\n}\n\nexport default CakeSizeChoice\n","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/ConnectWallet.tsx",[],"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/DonationItem.tsx",["56"],"import { BigNumberish, ethers } from 'ethers'\nimport React from 'react'\nimport { Donation } from '../types/donation'\nimport { fromUnixTime, formatDistanceToNow } from 'date-fns'\nimport {\n  VStack,\n  Text,\n  Divider,\n  HStack,\n  Circle,\n  Box,\n  Flex,\n  Spinner,\n} from '@chakra-ui/react'\n\nimport { MdOutlineNavigateNext } from 'react-icons/md'\n\ninterface Props {\n  item?: Donation\n}\n\nconst displayDate = (ts: BigNumberish) => {\n  const unix = +ethers.utils.formatUnits(ts, 0)\n  const date = fromUnixTime(unix)\n  const display = formatDistanceToNow(date, { addSuffix: true })\n  return display\n}\n\nconst mapping = {\n  0: 'Small',\n  1: 'Medium',\n  2: 'Large',\n}\n\nconst DonationItem = ({ item }: Props) => {\n  return (\n    <HStack borderLeftWidth={2} borderColor=\"gray.400\" spacing={0} py={4}>\n      {/* Dot */}\n      <Circle w={5} h={5} bg=\"teal.500\" transform=\"translateX(-10px)\">\n        <MdOutlineNavigateNext\n          color=\"#fff\"\n          style={{ transform: 'rotate(-90deg)' }}\n        />\n      </Circle>\n      {/* Connecting Line */}\n      <Box\n        h={0.5}\n        w={10}\n        bg=\"teal.300\"\n        rounded=\"full\"\n        m={0}\n        p={0}\n        transform=\"translateX(-10px)\"\n      />\n      <VStack\n        bg=\"teal.50\"\n        px={4}\n        py={4}\n        rounded=\"lg\"\n        borderColor=\"teal.500\"\n        borderWidth={3}\n        boxShadow=\"md\"\n        transform=\"translateX(-10px)\"\n      >\n        {!item ? (\n          <Flex justifyContent=\"center\" alignItems=\"center\" width=\"full\">\n            <Text>Start</Text>\n          </Flex>\n        ) : item.isLoading ? (\n          <>\n            <VStack alignSelf=\"flex-start\" spacing={0}>\n              <Text fontSize=\"xs\" alignSelf=\"flex-start\" color=\"gray.500\">\n                {displayDate(item?.timestamp)}\n              </Text>\n            </VStack>\n            {/* Replace with spinner */}\n            <Spinner style={{ marginTop: '1rem', marginBottom: '1rem' }} />\n\n            <Divider />\n            <VStack spacing={0}>\n              <Text fontSize=\"xs\" alignSelf=\"flex-end\" color=\"gray.500\">\n                Address: {item?.giver}\n              </Text>\n            </VStack>\n          </>\n        ) : (\n          <>\n            <VStack alignSelf=\"flex-start\" spacing={0}>\n              <Text fontSize=\"xs\" alignSelf=\"flex-start\" color=\"gray.500\">\n                {displayDate(item?.timestamp)}\n              </Text>\n              <Text fontSize=\"sm\" fontWeight=\"semibold\" alignSelf=\"flex-start\">\n                {item?.name} sent a {mapping[item?.cakeSize?.toNumber()]}{' '}\n                Cheesecake\n              </Text>\n            </VStack>\n\n            <Text py={4}>{item?.message}</Text>\n\n            <Divider />\n            <VStack spacing={0}>\n              <Text fontSize=\"xs\" alignSelf=\"flex-end\" color=\"gray.500\">\n                Address: {item?.giver}\n              </Text>\n            </VStack>\n          </>\n        )}\n      </VStack>\n    </HStack>\n  )\n}\n\nexport default DonationItem\n","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/Image.tsx",["57"],"import { useEffect, useState } from 'react'\n\nimport NextImage, { ImageProps } from 'next/image'\n\nexport default function Image(\n  props: ImageProps & { fallbackSrc?: ImageProps['src'] }\n) {\n  const { src, fallbackSrc, ...rest } = props\n  const [imgSrc, setImgSrc] = useState(src)\n\n  useEffect(() => {\n    setImgSrc(src)\n  }, [src])\n\n  return (\n    <NextImage\n      {...rest}\n      src={imgSrc}\n      unoptimized={true}\n      alt={props.alt || ''}\n      onError={() => {\n        fallbackSrc && setImgSrc(fallbackSrc) // only change to fallback if defined\n      }}\n    />\n  )\n}\n","/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/layout/Head.tsx",[],"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/components/layout/Layout.tsx",["58"],"/Users/favourchukwuedo/Documents/Opensource/web3/polygon-send-cheesecake/packages/frontend/lib/utils.ts",["59"],"import { UnsupportedChainIdError } from '@web3-react/core'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport Filter from 'bad-words'\n\n// import { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\n// From https://github.com/NoahZinsmeister/web3-react/blob/v6/example/pages/index.tsx\n// Parses the possible errors provided by web3-react\nexport function getErrorMessage(error: Error): string {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected\n    // error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Polygon account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport const capWord = (s: string) => {\n  if (!s || s.length === 0) {\n    return\n  }\n  return s[0].toLocaleUpperCase() + s.slice(1)\n}\n\nexport const filter = new Filter()\n",{"ruleId":"60","severity":1,"message":"61","line":41,"column":6,"nodeType":"62","endLine":41,"endColumn":24,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":52,"column":6,"nodeType":"62","endLine":52,"endColumn":42,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":41,"column":24,"nodeType":"68","messageId":"69","endLine":41,"endColumn":65},{"ruleId":"66","severity":1,"message":"67","line":12,"column":24,"nodeType":"68","messageId":"69","endLine":12,"endColumn":57},{"ruleId":"66","severity":1,"message":"67","line":35,"column":22,"nodeType":"68","messageId":"69","endLine":35,"endColumn":42},{"ruleId":"66","severity":1,"message":"67","line":5,"column":16,"nodeType":"70","messageId":"69","endLine":7,"endColumn":2},{"ruleId":"71","severity":2,"message":"72","line":29,"column":10,"nodeType":"73","messageId":"74","endLine":29,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":28,"column":24,"nodeType":"68","messageId":"69","endLine":28,"endColumn":38},"react-hooks/exhaustive-deps","React Hook React.useMemo has an unnecessary dependency: 'account'. Either exclude it or remove the dependency array.","ArrayExpression",["75"],"React Hook React.useMemo has an unnecessary dependency: 'chainId'. Either exclude it or remove the dependency array.",["76"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'FiGithub' is defined but never used.","Identifier","unusedVar",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [chainId]",{"range":"81","text":"82"},"Update the dependencies array to be: [library, CONTRACT_ADDRESS]",{"range":"83","text":"84"},[1615,1633],"[chainId]",[1874,1910],"[library, CONTRACT_ADDRESS]"]